namespace Crypto
{
	using System;
	using System.IO;
	using System.Text;
	using System.Threading.Tasks;

	/// <summary>
	///   Class that provides blowfish encryption.
	/// </summary>
	public class Blowfish : ICryptoProvider
	{
		private const int N = 16;

		#region Vectors

		private static readonly int[] _P =
			{
			-906192118, 1798643880, -258879099, -856492139, 1933043444, -95623046,
			-1919717464, -2126932828, -342114432, -2036086837, -1254951853, -463479354,
			-1079868619, 116047891, -651729391, -443691089, 998438876, 1915611871
			};

		private static readonly int[,] _S =
		{
			{
			17355888, 271781335, -236432809, 2073033252, -1529708821, -1848701309, 1843645715, 1924478005,
			-2063949178, -1363104062, -433833808, -486101829, -1323785463, 1278959535, 1288666683, -2145961007,
			-1283643340, -259831319, 541414428, -1063927937, -1437577490, 2115966389, -1634192911, -384784796,
			-187515095, -1308710629, 1765133562, 1041122440, -507719009, 554756055, 958009025, -904654107,
			1455105980, -2117007233, 776314968, -438710470, 1000645743, -2026704899, -1691692270, 519291589,
			1186083759, -168478097, -1082401211, -758206215, -479368016, -1317887486, 960469587, 763184961,
			1404763442, -76781445, 970383663, 1943146794, 630403120, -1395862362, -179355167, 2050676942,
			1376536369, -2119006096, 1954208479, 950880205, 874778948, -427110829, -1996956838, -1283627222,
			2033468727, -666672708, -1523996280, -1868127220, -597013411, 540818381, -1881418983, -826722186,
			793210478, -1060572507, 1537776854, -1516252587, 2122521360, 902319568, -450682751, -941313482,
			-744675803, -98478209, -1330277397, -381625305, 537312588, 1569550898, -947784235, -1616977678,
			-471790075, 1571620744, 1098650799, 430708095, 1489130718, -2025081859, 1115315177, -595488241,
			673806977, -623405420, -1816758722, 30088018, -715701968, -1527113794, -1285226680, 2059513975,
			-238704324, 1904436450, -971031265, 2143978212, 174515066, -729560272, 1374763348, 2047607786,
			-1459979260, 1009206952, -599694657, -761705816, 182148160, 585365061, -1410964324, 1158966237,
			747293649, 1618349089, -139038759, -915608855, 721823206, 18352201, -1850780161, 1091457847,
			1996032345, 1000822192, -1247175909, -155165574, 639686686, -789520190, -50718938, 1133698511,
			-2114488606, -45930485, -1192309821, 1901778250, -1008979768, 1130162626, -13545061, 871872487,
			-1439183140, -972061209, 130230768, -1666802329, 1830665508, -853426723, 560572998, -1734688021,
			1880681504, 821608437, 1425416048, -2142311440, 1835011093, 844457287, -1529219747, -318359257,
			-1095203428, 130404697, 1742431248, -1059462834, 1950678641, -1126893201, -1578947577, 426891508,
			-719140214, 957146056, 2023056148, -507832378, -982235394, -2082960656, 752402455, -593130638,
			-355954374, -622435968, -1542731155, -704200653, -881154410, 889100333, -1831452234, 191765126,
			-1176425047, -1005605121, 1676277805, 1702375969, -2029536334, 565913361, 1773967813, -1909424537,
			2017321633, 1268684930, 557499845, 411879245, -902457280, -700319918, 1674726842, 1155079089,
			1234419350, -1314664866, 749066942, 852941, 1159737137, 1981466521, 229733718, -787450960,
			-945031339, -1929188492, -163439977, -364333424, 335656271, 50785883, 1872242823, 2083667955,
			1894773217, -1273576956, -1630399895, -1734916484, -746805550, 1890749701, -613592727, -713753706,
			-1568609251, -286182518, 1777624113, 831857591, -36169224, 652058836, 752484392, 257773299,
			81909390, -34559829, 1666548101, -1019611981, -516111644, -1492010649, 125241377, -135091195,
			15099108, -360073094, -96313077, 128478798, -787102810, -1043168509, 469350661, 326342807,
			1980389563, -1997457205, -493484113, 1984965527, -76732869, -525620687, 353190684, 720838754
			},
			{
			1647664621, -656660067, 187861386, -1235179604, 169766131, 699979719, 17404414, 1551837996,
			-1124367313, 2014037061, -1162338924, 456399937, 1235423080, -2003895042, 745220078, -531014429,
			1556234357, 18043240, 666408338, -647386624, -1126904062, -1970465779, 1659009774, 2132764296,
			-658847538, -1006061300, -1415768655, 1371559483, -1279868531, -2076453444, 1386654979, -436327362,
			1899510785, 1880800515, -1675402632, 1464288694, 678104367, -691371650, -1725971024, -778952496,
			130592678, 758567031, 117117741, 1510114579, -835019088, -104478488, 505939822, -642071519,
			-1486646993, -2053705190, -1627805087, -1821623282, -1553815018, 1594474765, 589964876, 2134058638,
			-445875997, 1359929330, 1461489185, 702001023, -1414670656, -965685402, -1871426275, -1758958832,
			-403261048, -950016892, 212820141, 2101566132, -1190767219, -1033321, 1029540917, 828846006,
			-915190361, 1796385375, 1289404596, -1524701739, 902391876, 353024512, -460428660, 1209730611,
			-1535026396, -1758412364, 1911859337, 505854475, -548279963, 253752809, -1097264705, -1334843588,
			774093482, 205321566, 1628212622, -330811103, -192400874, 1706255018, -254994112, -667160666,
			1288543668, -104228222, 886174288, -1524677997, -1238474411, 192222738, -1612518978, -773641983,
			-341600295, -1345472175, 1383329906, -1182023321, 420980516, -1915832737, -475138561, -69963662,
			-2088922194, 1549256156, 167099244, -1306839074, -368067534, 138724670, 659198769, -545617344,
			10891471, 1418169607, -1540103969, 1521678686, 10377137, -191471042, -1616529628, -159691736,
			-317911517, -531057187, -597806816, 1006161836, -1060434988, -173385064, 1894541390, 499009537,
			1513559211, -1664760546, 1431968359, -1970658516, 916665110, -991571062, -976677460, -127782604,
			-526623855, 988391085, -1163190779, 1349573703, -1925327241, -150441681, -999971922, 979248536,
			793108993, -1155203131, 1746052568, 1412188093, -1758384928, -862982921, -1557809714, 1190780496,
			1557448786, 593333217, -1731390760, -854427129, 443336762, -336651389, -598831039, -459093040,
			1950873585, 969167334, -1059345986, -1708884856, 419894752, 2065348828, 1654646444, 1956428978,
			1265855155, -2070406000, -1238262335, -2128640749, 577915134, 1632116192, 695242253, 1178730958,
			1173232707, -368477724, 918039190, -419603685, 1230547809, 1727457844, -1890358291, 1161093078,
			1445563688, -1770789053, 1222828834, -820525132, 2053046247, 2109918664, 748667517, 1582955484,
			1203330620, 1902367361, 1688122134, -146620661, -45596314, -376890930, -1035881654, -1467974269,
			-64541654, 982977992, -697936617, 743635432, 101836458, -695942622, 1565727945, 1834307897,
			-596382434, -1166838648, -1285748, -527308044, 1961347087, 902149043, 2115223541, -15960385,
			1617577415, 2113362030, 353460827, -451202111, -505410558, 969442510, -1048276298, 319549072,
			999740154, -819089431, -1725709204, 229347793, -1916116666, -7864960, 2054653886, -1416686213,
			862861938, -2109870017, -1118516525, -1774418576, -681313701, 993515786, -943794687, -725580713,
			177391467, -191433155, 1854130659, 1013781073, 710426586, -311130850, -801056461, -934217023
			},
			{
			1907231612, 2030035853, 1082111110, 214971596, 1566666908, 254951853, 1872199178, 1793395886,
			1786146077, 1605443099, -1549748890, -425985245, 305521636, 834937636, 1177938857, 1144100975,
			-843670283, -1412474986, 1328775843, 697537186, -164050784, -600520438, 504638210, -832176173,
			2139430815, -725928660, -1256995722, 463252255, -1226352988, 2110962061, -217227328, 504218635,
			-1215819862, 1104715833, -1310004588, -1575353366, 638520054, -1530925921, -643238364, 1865749066,
			1060473840, -1494224588, -1441079575, -1255888724, -981748964, -119958192, -1646420027, 1707337172,
			1022320170, -1706264123, 1284189971, -1552325722, 2076192613, -892997859, 1911561692, 328623651,
			1485477526, -1620315393, -1161707887, 1740956455, -820065964, 969469617, -1429191888, -1306174960,
			775936634, -429247044, 1602209698, 1491025349, -453680792, 1138383611, -160570487, 774798379,
			-2017356734, 47692693, -108695466, -1237908522, 167804530, -1419543216, 968456783, 1652618108,
			-1700881548, 1904903777, 1724983032, 449496940, 1829900796, -1989025390, 183447152, -206092159,
			1854674912, -1596434314, -803327033, 125547493, 456307965, -2127364147, 1419021506, -174250137,
			1625846728, 2108306915, -326491691, -1450261331, -619633131, -1747772283, -1252090803, 1490703657,
			-390929136, 375634022, -1206256798, -261328847, 2071596651, 386760010, -1602479180, -1291687289,
			-1635584886, 422768184, -44583162, -1319146663, -716026152, -1058921248, -965906806, -1755036470,
			-630776258, -971378549, 1542745426, 1239739961, 1558920168, 1634274731, 1363598545, -937292210,
			1344110020, -1679301564, -869568875, 603764505, 1280880624, -1880083937, 288516979, 868141853,
			-987720623, 1044985791, -1817100267, -92899544, -1467901973, -998955705, -726227696, -882608698,
			1463048467, 1333329206, 1923236071, -808003566, -388901601, 907421371, -1959355910, -147652922,
			-22337752, 1435120540, -1614787166, -2140082809, 2080277885, 1787224721, -1795917176, -176855318,
			99687677, -677560536, -1400113150, -116466503, 1678497609, -1046791289, -41664986, -925928118,
			-720555015, -1127115817, -559506897, 1292067253, -1388816352, 496022272, -1898103797, 1291040842,
			984838645, 1671619760, 230673922, 1546553076, -1642310157, 2131654210, 1662974224, -284305078,
			-1009700978, 1607360740, -344935875, 1593698766, -1008941473, 1331584230, 1827323196, -861252894,
			640087675, -882573781, -85190475, -1944901931, 4010003, 2121632584, 1081214573, -1390029401,
			262061764, 1471902760, 1381851913, -1519450519, 321414242, -1903616445, 451185962, -249218595,
			868432976, -628236773, 1325714548, 673867640, 36148044, -1098235659, -1711017557, 1821251961,
			-392638412, -1244012968, 815708280, -1101838493, 1584754154, 98738210, 232101344, -983296077,
			641066695, -143023423, 1066914636, 1766112657, 651410254, -33290483, -119071629, 1540305877,
			1113864769, 358869544, 66209316, -593512662, 456481119, 20940468, 925258950, -353991819,
			587883948, 13247765, -534520154, 2068008829, 1941123072, 1556757744, 669861297, -2094078793,
			-1257845916, -2023473461, 2017772853, -481093863, 905247756, 1692586903, 1877436280, 1802130807
			},
			{
			-1670503728, 737576846, -1369035174, -1015432551, 999277971, -499495312, -1806100609, 1564768558,
			398759045, -821903141, 328241637, 204623249, 1463918795, -7585806, 1078485065, 346303829,
			221594948, 355940693, -1695626872, -143147485, 1255410371, -520761187, 1983951338, 2060613980,
			-629090982, 1488730243, 1125713518, -969360308, 105484931, -608764303, 813052547, -1884765945,
			1424931315, -1497203307, -1214468713, 601808069, -1555613993, -1312899537, -997668962, 206485505,
			467673613, -998836219, 718813676, 782257498, 523418858, -1160448373, -1614673078, -530283872,
			450343091, -1924512354, -1977102934, 2133909084, -613005918, 1153147220, -1781214968, 1807936044,
			161652466, 1265313529, -1972237230, 1086381339, 157859757, 170216990, -250754880, 460880309,
			609907091, -1328473859, -315362455, -1584203097, -1997454392, 1906928514, -470074976, 518524245,
			561302767, -1551201541, -946075779, 30563883, -1939783434, -1715053548, 584408337, 182899836,
			133510041, -755210964, 550949524, -1618848439, -1169688800, -1304471374, 2038745298, 1365436598,
			-170242170, -1232415178, -1937477045, -748017778, -1210436185, 2135109644, -1995542793, 522867787,
			-1736034530, -1642724204, -910248812, -1047773991, -2021952049, -1275699047, 1127985089, 745104124,
			1726584260, 1480416828, 638927655, -509079736, 1000783610, -1674456776, -1058496922, 1032300191,
			1836427642, 832845593, -331827011, -1440859000, -1165450503, 2126696959, 1978617001, 1760312073,
			-2008048628, -712704015, -1919212572, -1231607114, 434775250, -1595389991, 1667118117, -843766871,
			1760253916, -1215319068, 1435857623, 121629308, 320102539, 1555424589, 231782664, 41188111,
			-1275898118, 1690128357, -1894688518, -1566164186, 831358781, -1229964364, -1641848142, -646468944,
			-510584169, 1595852386, -124725077, -1560030701, 2016248208, 90924111, 322353492, 1975005633,
			-535280004, -83645130, 1623209338, -1852690697, -876662277, -1593309687, 438599800, -636761694,
			1763714941, 1374338488, 563096609, 850292058, -1947981879, -2005428614, 1512755730, -1226606066,
			-1482218972, -529240681, -864723178, 555450192, -2088610596, -2100287668, 1282276560, -1170105721,
			-1620408742, 1558124076, -47643885, -660581446, -399833771, 2138147430, 1188064794, -1683310484,
			1523305152, 450817201, -1409687886, -1163012324, 126777558, -889034478, -1850054112, 1193778438,
			316594092, -93899132, 1393853436, -894666264, 2079483946, 1151183199, 579387711, 1112557772,
			-1922733173, 367452253, -86192624, -444497267, -939418484, -891446049, 1820280924, -443018249,
			902751551, -1041454775, 563338831, 1619891718, 1129547734, 958518509, 391404912, -545791357,
			548121356, 448975297, -317828730, 1054315406, 374211531, -1169193800, 767570409, -1158651003,
			613112103, 1334700595, -980256573, -1697280750, -968822176, -1689101023, -1629792902, 1034581583,
			-421474905, -244300415, 410654285, -1454619106, 2073571346, -1040067897, 1075809852, 283149448,
			1762740658, 1062523381, -825050913, -1642044493, -548966299, -1522765792, 527599300, 445780177,
			596269560, 740351368, 1885745856, 272573765, -832358346, 2090674563, -1785401976, 484684134
			}
			};

		#endregion

		private readonly int[] P;
		private readonly int[,] S;

		public Blowfish(string key) : this(Encoding.Default.GetBytes(key))
		{
		}

		/// <summary>
		///   Constructs and initializes a blowfish instance with the supplied key.
		/// </summary>
		/// <param name="key">The key to cipher with.</param>
		public Blowfish(byte[] key)
		{
			short i;
			short j;
			short k;
			int data;
			int datal;
			int datar;

			P = _P.Clone() as int[];
			S = _S.Clone() as int[,];

			j = 0;
			for (i = 0; i < N + 2; ++i) {
				data = 0x00000000;
				for (k = 0; k < 4; ++k) {
					data = (data << 8) | key[j];
					j++;
					if (j >= key.Length) {
						j = 0;
					}
				}
				P[i] = P[i] ^ data;
			}

			datal = 0x00000000;
			datar = 0x00000000;

			for (i = 0; i < N + 2; i += 2) {
				Encipher(ref datal, ref datar);
				P[i] = datal;
				P[i + 1] = datar;
			}

			for (i = 0; i < 4; ++i) {
				for (j = 0; j < 256; j += 2) {
					Encipher(ref datal, ref datar);

					S[i, j] = datal;
					S[i, j + 1] = datar;
				}
			}
		}

		/// <summary>
		/// </summary>
		/// <param name="x"></param>
		/// <returns></returns>
		private int F(int x)
		{
			short a;
			short b;
			short c;
			short d;
			int y;

			d = (short) (x & 0x00FF);
			x >>= 8;
			c = (short) (x & 0x00FF);
			x >>= 8;
			b = (short) (x & 0x00FF);
			x >>= 8;
			a = (short) (x & 0x00FF);
			//y = ((S[0][a] + S[1][b]) ^ S[2][c]) + S[3][d];
			y = S[0, a] + S[1, b];
			y = y ^ S[2, c];
			y = y + S[3, d];

			return y;
		}

		/// <summary>
		///   Encrypts a byte array in place.
		/// </summary>
		/// <param name="data">The array to encrypt.</param>
		/// <param name="length">The amount to encrypt.</param>
		private void Encipher(byte[] data, int length)
		{
			int xl, xr;
			if ((length % 8) != 0)
				throw new Exception("Invalid Length");
			for (int i = 0; i < length; i += 8) {
				// Encode the data in 8 byte blocks.
				xl = (data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3];
				xr = (data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7];
				Encipher(ref xl, ref xr);
				// Now Replace the data.
				data[i] = (byte) (xl >> 24);
				data[i + 1] = (byte) (xl >> 16);
				data[i + 2] = (byte) (xl >> 8);
				data[i + 3] = (byte) (xl);
				data[i + 4] = (byte) (xr >> 24);
				data[i + 5] = (byte) (xr >> 16);
				data[i + 6] = (byte) (xr >> 8);
				data[i + 7] = (byte) (xr);
			}
		}

		/// <summary>
		///   Encrypts 8 bytes of data (1 block)
		/// </summary>
		/// <param name="xl">The left part of the 8 bytes.</param>
		/// <param name="xr">The right part of the 8 bytes.</param>
		private void Encipher(ref int xl, ref int xr)
		{
			int Xl;
			int Xr;
			int temp;
			short i;

			Xl = xl;
			Xr = xr;

			for (i = 0; i < N; ++i) {
				Xl = Xl ^ P[i];
				Xr = F(Xl) ^ Xr;

				temp = Xl;
				Xl = Xr;
				Xr = temp;
			}

			temp = Xl;
			Xl = Xr;
			Xr = temp;

			Xr = Xr ^ P[N];
			Xl = Xl ^ P[N + 1];

			xl = Xl;
			xr = Xr;
		}

		/// <summary>
		///   Decrypts a byte array in place.
		/// </summary>
		/// <param name="data">The array to decrypt.</param>
		/// <param name="length">The amount to decrypt.</param>
		private void Decipher(byte[] data, int length)
		{
			int xl, xr;
			if ((length % 8) != 0)
				throw new Exception("Invalid Length");
			for (int i = 0; i < length; i += 8) {
				// Encode the data in 8 byte blocks.
				xl = (data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3];
				xr = (data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7];
				Decipher(ref xl, ref xr);
				// Now Replace the data.
				data[i] = (byte) (xl >> 24);
				data[i + 1] = (byte) (xl >> 16);
				data[i + 2] = (byte) (xl >> 8);
				data[i + 3] = (byte) (xl);
				data[i + 4] = (byte) (xr >> 24);
				data[i + 5] = (byte) (xr >> 16);
				data[i + 6] = (byte) (xr >> 8);
				data[i + 7] = (byte) (xr);
			}
		}

		/// <summary>
		///   Decrypts 8 bytes of data (1 block)
		/// </summary>
		/// <param name="xl">The left part of the 8 bytes.</param>
		/// <param name="xr">The right part of the 8 bytes.</param>
		private void Decipher(ref int xl, ref int xr)
		{
			int Xl;
			int Xr;
			int temp;
			short i;

			Xl = xl;
			Xr = xr;

			for (i = N + 1; i > 1; --i) {
				Xl = Xl ^ P[i];
				Xr = F(Xl) ^ Xr;

				/* Exchange Xl and Xr */
				temp = Xl;
				Xl = Xr;
				Xr = temp;
			}

			/* Exchange Xl and Xr */
			temp = Xl;
			Xl = Xr;
			Xr = temp;

			Xr = Xr ^ P[1];
			Xl = Xl ^ P[0];

			xl = Xl;
			xr = Xr;
		}

		public async Task EncryptToHmpAsync(FileInfo fileInfo)
		{
			var hmpPath = fileInfo.FullName.Replace(".jpg", ".hmp");
			byte[] imageData;
			var originalFileLength = Convert.ToInt32(fileInfo.Length);

			using (var s = new FileStream(fileInfo.FullName, FileMode.Open))
			{
				using (var m = new MemoryStream())
				{
					await s.CopyToAsync(m);
					using (var br = new BinaryReader(m)) {
						br.BaseStream.Position = 0;
						imageData = br.ReadBytes(originalFileLength);
					}
				}
			}

			var padded = PadIt(imageData, 8);
			Encipher(padded, padded.Length);

			using (var mo = new MemoryStream())
			{
				using (var bw = new BinaryWriter(mo))
				{
					bw.BaseStream.Position = 0;
					bw.Write(originalFileLength);
					bw.Write(padded);
					using (var fo = new FileStream(hmpPath, FileMode.Create)) {
						mo.Position = 0;
						await mo.CopyToAsync(fo);
					}
				}
			}
		}

		private static byte[] PadIt(byte[] src, int pad)
		{
			int len = ((src.Length + pad - 1) / pad) * pad;
			Array.Resize(ref src, len);

			return src;
		}

		public async Task DecryptToJpgAsync(FileInfo fileInfo)
		{
			var jpgPath = fileInfo.FullName.Replace(".hmp", ".jpg");

			var len = Convert.ToInt32(fileInfo.Length);

			int unpaddedImageLength;
			byte[] paddedImageData;

			using (var s = new FileStream(fileInfo.FullName, FileMode.Open))
			{
				using (var m = new MemoryStream())
				{
					await s.CopyToAsync(m);
					using (var b = new BinaryReader(m))
					{
						b.BaseStream.Position = 0;
						unpaddedImageLength = b.ReadInt32();
						paddedImageData = b.ReadBytes(len - 4);
					}
				}
			}

			var decryptedBytes = await DecryptImageBytesAsync(paddedImageData, unpaddedImageLength);

			using (var mo = new MemoryStream(decryptedBytes))
			{
				using (var so = new FileStream(jpgPath, FileMode.Create)) {
					mo.Position = 0;
					await mo.CopyToAsync(so);
				}
			}
		}

		private async Task<byte[]> DecryptImageBytesAsync(byte[] imageBytes, int imageLength)
		{
			await Task.Run(() => Decipher(imageBytes, imageBytes.Length));

			var bytes = (byte[])imageBytes.Clone();
			Array.Resize(ref bytes, imageLength);

			return bytes;
		}
	}
}